{"version":3,"sources":["app/transactions/duck/types.js","app/transactions/duck/actions.js","app/transactions/components/CurrencyRatioExchangeContainer/index.js","app/transactions/components/_reusable/ShowCurrency.js","app/transactions/components/TransactionView/index.js","app/transactions/components/TopTransactionList/index.js","app/transactions/components/TransactionForm/index.js","app/transactions/components/TransactionListContainer/index.js","App.js","serviceWorker.js","app/transactions/duck/reducers.js","reducers.js","store.js","index.js"],"names":["item","type","types","connect","dispatch","changeRates","exchangeRate","actions","props","exchangeValueInput","React","createRef","useSelector","state","transactions","className","onSubmit","event","preventDefault","parseInt","current","value","pattern","step","title","ref","defaultValue","ShowCurrency","currencyValue","Math","round","remove","transaction","name","valueEuro","onClick","id","TopTransactionList","list","topTransactions","slice","sort","a","b","map","key","add","transactionNameInput","transactionValueInput","length","App","Boolean","window","location","hostname","match","INITIAL_STATE","transactionReducer","action","produce","draftState","push","filter","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b6a0b1e6.chunk.js","sourcesContent":["const ADD_TRANSACTION = 'ADD_TRANSACTION';\nconst REMOVE_TRANSACTION = 'REMOVE_TRANSACTION';\nconst CHANGE_EXCHANGE_RATE = 'CHANGE_EXCHANGE_RATE';\n\nexport default {\n\tADD_TRANSACTION,\n\tREMOVE_TRANSACTION,\n\tCHANGE_EXCHANGE_RATE\n}\n","import types from './types'\n\nconst add = item => ({\n\ttype: types.ADD_TRANSACTION, item\n});\n\nconst remove = item => ({\n\ttype: types.REMOVE_TRANSACTION, item\n});\n\nconst changeRates = item => ({\n\ttype: types.CHANGE_EXCHANGE_RATE, item\n});\n\nexport default {\n\tadd,\n\tremove,\n\tchangeRates\n}\n","import React from 'react'\nimport {useSelector} from \"react-redux\";\nimport connect from \"react-redux/es/connect/connect\";\nimport actions from \"../../duck/actions\";\n\nconst CurrencyRatioExchangeContainer = (props) => {\n\tconst exchangeValueInput = React.createRef();\n\tconst exchangeRate = useSelector(state => state.transactions.exchangeRate);\n\n\tconst changeExchangeRate = (event) => {\n\t\tevent.preventDefault();\n\t\tprops.changeRates(parseInt(exchangeValueInput.current.value))\n\t};\n\n\treturn <div className={'CurrencyRatioExchangeContainer'}>\n\t\t<div>{`1 Eur = `}</div>\n\t\t<form onSubmit={changeExchangeRate}>\n\t\t\t<input\n\t\t\t\ttype=\"number\"\n\t\t\t\tpattern=\"[0-9]+([,\\.][0-9]+)?\"\n\t\t\t\tstep=\"0.01\"\n\t\t\t\ttitle=\"The number input must start with a number and use either comma or a dot as a decimal character.\"\n\t\t\t\tref={exchangeValueInput}\n\t\t\t\tclassName={'exchangeValueInput'}\n\t\t\t\tdefaultValue={exchangeRate}\n\t\t\t/>\n\t\t\t<button\n\t\t\t\ttype={\"submit\"}\n\t\t\t\tclassName=\"Button changeButton\"\n\t\t\t> Change </button>\n\t\t</form>\n\t</div>\n};\n\n\nconst mapDispatchToProps = dispatch => ({\n\tchangeRates: exchangeRate => dispatch(actions.changeRates(exchangeRate))\n});\n\n\nexport default connect(null, mapDispatchToProps)(CurrencyRatioExchangeContainer)\n\n","import React from \"react\";\n\nconst ShowCurrency = (props) => {\n\tlet exchangeRate = !!props.exchangeRate ? props.exchangeRate : 1;\n\tlet currencyValue = Math.round((props.value * exchangeRate) * 100) / 100;\n\treturn <div className={'currencyContainer'}>\n\t\t<span className={'currencyValue'}>{currencyValue}</span>\n\t</div>\n};\n\nexport default ShowCurrency\n","import React from 'react'\nimport connect from \"react-redux/es/connect/connect\";\nimport actions from \"../../duck/actions\";\nimport ShowCurrency from \"../_reusable/ShowCurrency\";\n\nconst TransactionView = (props) => {\n\tconst removeTransaction = (id) => {\n\t\tprops.remove(id)\n\t};\n\n\treturn <div className={'TransactionView'}>\n\t\t{props.name}\n\t\t<ShowCurrency\n\t\t\tvalue={props.valueEuro}\n\t\t/>\n\t\t<ShowCurrency\n\t\t\tvalue={props.valueEuro}\n\t\t\texchangeRate={props.exchangeRate}\n\t\t/>\n\t\t<button\n\t\t\tclassName=\"Button removeButton\"\n\t\t\tonClick={()=>removeTransaction(props.id)}>\n\t\t</button>\n\t</div>\n};\n\n\nconst mapDispatchToProps = dispatch => ({\n\tremove: transaction => dispatch(actions.remove(transaction))\n});\n\n\nexport default connect(null, mapDispatchToProps)(TransactionView)\n\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport TransactionView from \"../TransactionView\";\r\n// import './TopTransactionList.scss'\r\n\r\nconst TopTransactionList = () => {\r\n\tconst transactions = useSelector(state => state.transactions.list);\r\n\tconst exchangeRate = useSelector(state => state.transactions.exchangeRate);\r\n\r\n\tconst sortedTransactions = transactions.slice().sort((a, b) => (a.valueEuro < b.valueEuro) ? 1 : -1);\r\n\tconst topTransactions = sortedTransactions.slice(0,3);\r\n\r\n\treturn <div className={'TopTransactionList'}>\r\n\t\t{topTransactions.map(transaction =>\r\n\t\t\t<TransactionView\r\n\t\t\t\tkey={transaction.id}\r\n\t\t\t\tid={transaction.id}\r\n\t\t\t\tname={transaction.name}\r\n\t\t\t\tvalueEuro={transaction.valueEuro}\r\n\t\t\t\texchangeRate={exchangeRate}\r\n\t\t\t/>\r\n\t\t)}\r\n\t</div>\r\n};\r\n\r\nexport default TopTransactionList;\r\n","import React from 'react'\nimport {connect, useSelector} from 'react-redux';\nimport actions from \"../../duck/actions\";\n\nconst TransactionForm = (props) => {\n\tconst transactionNameInput = React.createRef();\n\tconst transactionValueInput = React.createRef();\n\tconst transactions = useSelector(state => state.transactions.list);\n\n\tconst addTransaction = (event) => {\n\t\tevent.preventDefault();\n\t\tprops.add({\n\t\t\tid: transactions.length,\n\t\t\tname: transactionNameInput.current.value,\n\t\t\tvalueEuro: parseInt(transactionValueInput.current.value)});\n\t\ttransactionNameInput.current.value = '';\n\t\ttransactionValueInput.current.value = 1;\n\t};\n\n\treturn <form onSubmit={addTransaction} className={'TransactionForm'}>\n\t\t<input ref={transactionNameInput} name={'transactionNameInput'}/>\n\t\t<input  type=\"number\"\n\t\t\t\tpattern=\"[0-9]+([,\\.][0-9]+)?\"\n\t\t\t\tstep=\"any\"\n\t\t\t\ttitle=\"The number input must start with a number and use either comma or a dot as a decimal character.\"\n\t\t\t\tname=\"transactionValueInput\"\n\t\t\t\tref={transactionValueInput}\n\t\t\t\tdefaultValue={1}\n\t\t/>\n\t\t<button type='submit'>Add Transaction</button>\n\t</form>\n};\n\nconst mapDispatchToProps = dispatch => ({\n\tadd: transaction => dispatch(actions.add(transaction))\n})\n\nexport default connect(null, mapDispatchToProps)(TransactionForm)\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport connect from \"react-redux/es/connect/connect\";\nimport actions from \"../../duck/actions\";\nimport TransactionView from \"../TransactionView\";\n// import './TransactionListContainer.scss'\n\nconst TransactionListContainer = () => {\n\tconst transactions = useSelector(state => state.transactions.list);\n\tconst exchangeRate = useSelector(state => state.transactions.exchangeRate);\n\n\n\treturn <div className={'TransactionListContainer'}>\n\t\t\t{transactions.map(transaction =>\n\t\t\t\t<TransactionView\n\t\t\t\t\tkey={transaction.id}\n\t\t\t\tid={transaction.id}\n\t\t\t\tname={transaction.name}\n\t\t\t\tvalueEuro={transaction.valueEuro}\n\t\t\t\texchangeRate={exchangeRate}\n\t\t\t\t/>\n\t\t\t)}\n\t\t</div>\n\n};\n\nconst mapDispatchToProps = dispatch => ({\n\tremove: transaction => dispatch(actions.remove(transaction))\n});\n\n\nexport default connect(null, mapDispatchToProps)(TransactionListContainer)\n","import React from 'react';\nimport './App.scss';\nimport {useSelector} from \"react-redux\";\nimport CurrencyRatioExchangeContainer from \"./app/transactions/components/CurrencyRatioExchangeContainer\";\nimport TopTransactionList from \"./app/transactions/components/TopTransactionList\";\nimport TransactionForm from \"./app/transactions/components/TransactionForm/index\";\nimport TransactionListContainer from \"./app/transactions/components/TransactionListContainer\";\n\nfunction App() {\n\tconst transactions = useSelector(state => state.transactions.list);\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<div className={'left-column'}>\n\t\t\t\t<TransactionForm/>\n\t\t\t\t<TransactionListContainer/>\n\t\t\t</div>\n\t\t\t<div className={'right-column'}>\n\t\t\t\t<TopTransactionList\n\t\t\t\t\ttransactions={transactions}\n\t\t\t\t/>\n\t\t\t\t<CurrencyRatioExchangeContainer/>\n\t\t\t</div>\n\n\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import types from './types'\nimport produce from 'immer'\n\n\nconst INITIAL_STATE = {\n\texchangeRate: 4.27,\n\tlist: [\n\t\t{\n\t\t\tid: 0,\n\t\t\tname: 'PC parts',\n\t\t\tvalueEuro: 112.6\n\t\t},\n\t\t{\n\t\t\tid: 1,\n\t\t\tname: 'Truck Fuel',\n\t\t\tvalueEuro: 125.4\n\t\t},\n\t\t{\n\t\t\tid: 2,\n\t\t\tname: 'Internet Bills',\n\t\t\tvalueEuro: 20.22\n\t\t},\n\t\t{\n\t\t\tid: 3,\n\t\t\tname: 'Christmas Presents',\n\t\t\tvalueEuro: 85.32\n\t\t},\n\t]\n};\n\n\n\nconst transactionReducer = (state = INITIAL_STATE, action) => {\n\tswitch (action.type) {\n\t\tcase types.ADD_TRANSACTION:\n\t\t\treturn produce(state, draftState => {\n\t\t\t\tdraftState.list.push(action.item)\n\t\t\t});\n\t\tcase types.REMOVE_TRANSACTION:\n\t\t\treturn produce(state, draftState=> {\n\t\t\t\tdraftState.list = draftState.list.filter(item => item.id !== action.item)\n\t\t\t});\n\t\tcase types.CHANGE_EXCHANGE_RATE:\n\t\t\treturn produce(state, draftState => {\n\t\t\t\tdraftState.exchangeRate = action.item\n\t\t\t});\n\t\tdefault:\n\t\t\treturn state\n\t}\n};\n\nexport default transactionReducer\n","import { combineReducers } from 'redux'\nimport { transactionReducer } from './app/transactions/duck/index'\n\nconst rootReducer = combineReducers({\n\ttransactions: transactionReducer\n});\n\nexport default rootReducer\n","import  { createStore, applyMiddleware} from 'redux';\nimport  { composeWithDevTools } from 'redux-devtools-extension';\nimport  rootReducer from './reducers'\nimport \tthunk from 'redux-thunk'\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nexport default store\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}